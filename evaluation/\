# Target Driven Instance Detection

This is an implementation of the technique described in "Target Driven Instance Detection". It is written in python for use with Pytorch. 


## External Requirements
* Python 2 (might work with Python 3)
* [PyTorch](http://pytorch.org/)
* [AVD Data](http://www.cs.unc.edu/~ammirato/active_vision_dataset_website/get_data.html) Parts 1, 2 and 3
* [AVD processing code](https://github.com/ammirato/active_vision_dataset_processing)

## Installation
These instructions will setup the code and data to run our experiments on the AVD dataset. More instructions will be provided to run our other experiments or use your own data.  

0. Dependencies:

- Make sure you have Pytorch (and torchvision)
- Get the [AVD processing code](https://github.com/ammirato/active_vision_dataset_processing), and make sure it is included in your PYTHONPATH
- Download the [AVD Data](http://www.cs.unc.edu/~ammirato/active_vision_dataset_website/get_data.html) into a path of your choosing, we will refer to is as `AVD-PATH`.

1. Get the code
```
git clone https://github.com/ammirato/target_driven_instance_detection.git
```

2. Install the other requirements
```
cd target_driven_instance_detection/
pip install -r requirements.txt
```

3. Build the cython code for anchor boxes and non-max supression
```
cd model_defs/
./make.sh
```

4. Build the coco evaluation cython code 
```
cd ../evaluation/cocoapi/PythonAPI/
make all
```

5. Convert AVD annotations to COCO format, or download the converted files

6. Set paths in config file

6. Start training!
```
cd ../../../
python train_tdid.py
```



### TODO
1. Set up validation code --DONE
2. converting AVD to coco gt --DONE
3. evaling on org AVD  --DONE
4. config files
5. Add to README for extra data (target images, synthetic data)
6. Insatnce id map
7. GMU DATA things
8. UW data things
6. Fix eval by object
7. Test det4class
8. provide trained models
9. make a note about downloading pretrained pytorch models

### Acknowledgements
This code started as a modification of a Faster-RCNN Pytorch implementation [here](https://github.com/longcw/faster_rcnn_pytorch), and still uses some of that code. (In particular nothing was changed in the nms code).



